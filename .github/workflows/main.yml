# This workflow validates, deploys, and runs the Databricks bundle for the
# "dev" environment. It uses GitHub OIDC authentication for secure,
# tokenless access to Databricks (no need to store long-lived PATs).
# Reference: https://docs.databricks.com/en/dev-tools/bundles/ci-cd.html
# ---------------------------------------------------------------------------

# This workflow validates, deploys, and runs the specified bundle
# within a pre-production target named "dev".
name: 'Dev deployment'

# Ensure that only a single job or workflow using the same concurrency group
# runs at a time.
concurrency: 1

# Trigger this workflow whenever a pull request is opened against the repo's
# main branch or an existing pull request's head branch is updated.
# - Manually via "workflow_dispatch" (triggered by a user in GitHub UI)
on:
 workflow_dispatch:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main
      
permissions:
  id-token: write     # write → Required for GitHub OIDC authentication with Databricks
  contents: read      # read → Needed to check out the repository code
  
jobs:
  # Used by the "pipeline_update" job to deploy the bundle.
  # Bundle validation is automatically performed as part of this deployment.
  # If validation fails, this workflow fails.
  deploy:
    name: 'Deploy bundle'
    runs-on: ubuntu-latest
    environment: dev
    env:
      # --- Databricks Authentication and Configuration -----------------------
      # Using OIDC (OpenID Connect) to securely authenticate to Databricks.
      # These values match your Databricks workspace and service principal.
      #
      # DATABRICKS_TOKEN: ${{ secrets.PAT }}  # Use personal token as alternative to authenticate 
      # DATABRICKS_BUNDLE_ENV: dev            # Optional environment override for bundle
          #DATABRICKS_TOKEN: ${{ secrets.PAT }}
          #DATABRICKS_BUNDLE_ENV: dev
          DATABRICKS_AUTH_TYPE: github-oidc   # Enables GitHub → Databricks OIDC federation
          DATABRICKS_HOST: ${{ secrets.DEVWORKSPACE }}  # Workspace URL
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKSSP }}           # Service principal
          
    steps:
      # Check out this repo, so that this workflow can access it.
      - uses: actions/checkout@v3

      # Download the Databricks CLI.
      # See https://github.com/databricks/setup-cli
      - uses: databricks/setup-cli@main

      # Deploy the bundle to the "dev" target as defined
      # in the bundle's settings file.
      - run: databricks bundle deploy 
        working-directory: .


  # ----------------------------------------------------------------------------
  # This job runs after successful deployment.
  # It executes the Databricks job (defined in your bundle as lab_job)
  # to validate functionality and update the pipeline.
  # ----------------------------------------------------------------------------

  # Validate, deploy, and then run the bundle.
  pipeline_update:
    name: 'Run pipeline update'
    runs-on: ubuntu-latest
    environment: dev

    # Run the "deploy" job first.
    needs:
      - deploy

    steps:
      # Check out this repo, so that this workflow can access it.
      - uses: actions/checkout@v3

      # Use the downloaded Databricks CLI.
      - uses: databricks/setup-cli@main

      # Run the Databricks workflow named "my-job" as defined in the
      # bundle that was just deployed.
      - run: databricks bundle run lab_job --refresh-all
        working-directory: .
        env:
          #DATABRICKS_TOKEN: ${{ secrets.PAT }}
          #DATABRICKS_BUNDLE_ENV: dev
          DATABRICKS_AUTH_TYPE: github-oidc
          DATABRICKS_HOST: ${{ secrets.DEVWORKSPACE }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKSSP }}


      

     
